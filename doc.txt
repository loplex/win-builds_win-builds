= Yypkg's mingw-builds =

Mingw-builds creates binary packages of libraries and tools for windows
in a clean and reproducible way, making building for windows easier. It
is supported by the yypkg package manager. Both of them will become
official tools and repositories for the mingw-w64 project.

* targets windows 32bit, 64 bit soon
* works on both windows and linux
* GTK+, EFLs, curl, libsoup, ...
* binary packages
* build scripts available for everything

== Support and coverage ==
There are currently 52 packages. There are both cross and native
toolchains. The native one is new and less tested than the cross one.

=== Cross-toolchain ===
The toolchain provides binutils 2.22.52.0.2, GCC 4.7.1 with C and C++,
mingw-w64 2.0.3.
The link:packages/cross_toolchain_32/package_list.html[detailed list]
is available.

=== Windows files ===

There are currently 42 non-toolchain packages with many more planned.
There are enough packages to build GTK+ and EFL applications, GCC itself
and several network components; webkit-gtk support is close too.

The link:packages/windows_32/package_list.html[detailed list] is
available.

== Getting and running the system ==

=== Simple use (prebuilt binaries) ===

The following commands will download and setup a system ready for
cross-compilation to i686-w64-mingw32.

First, download the base system:
------------------------------------------------------------------------
wget http://notk.org/~adrien/yypkg/latest/system.tar.xz
------------------------------------------------------------------------

Extract it somewhere (here in "rc2_32/"):
------------------------------------------------------------------------
mkdir rc2_32
sudo tar xf system.tar.xz -C rc2_32
------------------------------------------------------------------------

Get the project main scripts:
------------------------------------------------------------------------
git clone http://git.notk.org/adrien/yypkg/mingw-builds.git
------------------------------------------------------------------------

Chroot into the base environment with several environment variables set
automatically:
------------------------------------------------------------------------
sudo ./mingw-builds/main.sh rc2_32
------------------------------------------------------------------------

The first time you get into the sytem, download and setup the
cross-toolchain and all the cross-compiled tools and libraries:
------------------------------------------------------------------------
/root/get-all-prebuilt-binaries-i686.sh
------------------------------------------------------------------------

// === Yypkg cheatsheet ===
// See "yypkg -help" for a quick reference and
// link:http://git.ocamlcore.org/cgi-bin/gitweb.cgi?p=yypkg/yypkg.git;a=blob;f=USAGE[yypkg's
// documentation] for a more complete documentation

==== Demo ====
In order to build the GTK+ Hello world, cd in the mingw-build directory
and run (copy-paste) the following:

------------------------------------------------------------------------
sudo ./main.sh rc2_32

cd root

cat << EOF > gtk_hello_world.c
#include <gtk/gtk.h>

int main(int argc, char *argv[]) {
    GtkWidget *window;
    gtk_init (&argc, &argv);
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    gtk_widget_show  (window);
    gtk_main ();
    return 0;
}
EOF

i686-w64-mingw32-gcc -o gtk_hello_world.exe gtk_hello_world.c $(pkg-config --cflags --libs gtk+-2.0)
------------------------------------------------------------------------

=== Advanced usage: Build it yourself ===
Building everything yourself is not hard nor time-consuming: a full build
is very easy to setup and takes a couple hours on an old machine and one
hour on a quad-core from 2 to 3 years ago. The documentation is
available on a separate page link:doc-diy.html[doc-diy].

== Comparison with other systems ==
Work on yypkg and the build scripts along with the infrastructure has
started several years ago, interrupted several times and already
rewritten once at least (no second-system effect in any case).

The need for such a system was pretty obvious and at the time, nothing
came any close. The requirements haven't changed much over the years;
some other projects have improved but it doesn't look like any of them
has obsoleted yypkg.

Feel free to send notes for the tables below: it is definitely nor
perfect nor complete.

[grid="rows"]
[options="header"]
|=======================================================================
|Project    |OS portability       |Compiler portability            |Package manager         |Number of packages    |QA
|yypkg      |POSIX and windows    |GCC, mingw-w64; MSVC planned    |Yes                     |Around 50, increasing |Yes
|coApp      |Windows              |MSVC                            |State unknown           |Unknown               |unknown
|MXE        |Cross-only           |GCC, mingw.org, 32bit           |No                      |Quite high            |Unknown
|mingw-get  |Windows              |GCC, mingw.org (and mingw-w64?) |No (definitely not)     |High                  |No
|opensuse's |OpenSuse             |GCC, mingw-w64                  |Yes                     |High (~200)           |Yes
|========================================================================

A note about mingw-get: it is not a package manager but merely a wrapper
around wget and tar xf which can only install but not uninstall nor
upgrade.

