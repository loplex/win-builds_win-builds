= Building yourself =

== Scripts ==
Run the following to get all the source files:
------------------------------------------------------------------------
NOTK="http://git.notk.org/adrien/yypkg"

mkdir -p "yypkg" "yypkg_packages"

git clone "http://git.ocamlcore.org/yypkg/yypkg.git"
git clone "${NOTK}/mingw-builds.git"
git clone "${NOTK}/yy_of_slack.git"
git clone "${NOTK}/slackware64-current.git"
git clone "${NOTK}/mingw.git"
git clone "${NOTK}/slackbuilds.org.git"
------------------------------------------------------------------------

Note that this will fail with git 1.7.2 because of a bug that has been
fixed in git 1.8.0 (see commit "http: fix segfault in
handle_curl_result", 188923f0d1c8148415b3173986cd1e21871c947e).

== Building the host system ==
This requires a slackware64 14.0 system currently. You also need a
mirror of the sources.
------------------------------------------------------------------------
MIRROR="${PWD}/mirror/slackware64-current" \
  ARCH=x86_64 \
  ./yy_of_slack/yy_of_slack.sh
------------------------------------------------------------------------

== Downloading source tarballs ==
You need to copy the same source files and patches as those in
slackware64 14.0 except for gnutls which has to be version 3.1.2. All
these files go in slackware64-current/ and follow the same hierarchy as
in slackware64 sources.

The mingw/ and slackbuilds.org/ directory also need sources.

This is not terribly practical and a simpler solution is being worked on
but won't be available before a few weeks. In the meantime, the
following can help copy sources:
------------------------------------------------------------------------
(cd slackware64-current && find . -mindepth 2 -type d -name .git -prune
-o -type f -name '*.yypkg.meta' -printf '%h\n') | while read dir; do
rsync --verbose --ignore-existing -r
mirror/slackware64-current/source/${dir}/ slackware64-current/${dir}/;
done
------------------------------------------------------------------------

== Start the build ==

=== Building everything ===
As root, run:
------------------------------------------------------------------------
./mingw-builds/build-packages.sh 1.2-rc1
------------------------------------------------------------------------

You can change the directory where files will be put; here it is
"1.2-rc1".

=== Building only a series ===
It is possible to only build one category out of: init,
native_toolchain, cross_toolchain_32/cross_toolchain_64,
windows_32/windows_64.

* init is required; it sets up the build environment
* native_toolchain adds new native tools on the build system that
  slackware doesn't have; for instance, it installs ocaml because
  building the ocaml cross-compiler requires an ocaml native compiler
* cross_toolchain_* build the cross-toolchain
* windows_* cross-compiles the binaries that will run on windows (this
  include the GCC native compiler)

An example invocation is:
------------------------------------------------------------------------
./mingw-builds/build-packages.sh 1.2-rc1 windows
------------------------------------------------------------------------

=== Building only one package ===
You can further refine what will be built by appending the package name
after the series.

An example invocation is:
------------------------------------------------------------------------
./mingw-builds/build-packages.sh 1.2-rc1 windows libjpeg
------------------------------------------------------------------------
