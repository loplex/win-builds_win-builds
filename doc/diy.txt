= Building yourself =

== Scripts ==
Run the following to get all the source files:
------------------------------------------------------------------------
NOTK="http://git.notk.org/adrien/yypkg"

git clone "http://git.ocamlcore.org/yypkg/yypkg.git"
git clone "${NOTK}/win-builds.git"
git clone "${NOTK}/yy_of_slack.git"
git clone "${NOTK}/slackware64-current.git"
git clone "${NOTK}/mingw.git"
git clone "${NOTK}/slackbuilds.org.git"
------------------------------------------------------------------------

Note that this will fail with git 1.7.2 because of a bug that has been
fixed in git 1.8.0 (see commit "http: fix segfault in
handle_curl_result", 188923f0d1c8148415b3173986cd1e21871c947e).

== Building the host system ==
This requires a slackware64 14.0 system currently. You also need a
mirror of the sources.
------------------------------------------------------------------------
MIRROR="${PWD}/mirror/slackware64-current" \
  ./yy_of_slack/yy_of_slack.sh
------------------------------------------------------------------------

== Downloading source tarballs ==
In order to retrieve the tarballs, you need to use the following git
command:
------------------------------------------------------------------------
git merge origin/tarballs
------------------------------------------------------------------------

In order to update your git repository, you will then have to run:
------------------------------------------------------------------------
git pull --rebase
git merge origin/tarballs
------------------------------------------------------------------------

If you've started doing changes, you should first learn how to use git
well.

== Start the build ==

=== Building everything ===
As root, run:
------------------------------------------------------------------------
./win-builds/build-packages.sh 1.3-alpha1
------------------------------------------------------------------------

You can change the directory where files will be put; here it is
"1.3-alpha1".

=== Building only a series ===
It is possible to only build one category out of: init,
native_toolchain, cross_toolchain_32/cross_toolchain_64,
windows_32/windows_64.

* init is required; it sets up the build environment
* native_toolchain adds new native tools on the build system that
  slackware doesn't have; for instance, it installs ocaml because
  building the ocaml cross-compiler requires an ocaml native compiler
* cross_toolchain_* build the cross-toolchain
* windows_* cross-compiles the binaries that will run on windows (this
  include the GCC native compiler)

An example invocation is:
------------------------------------------------------------------------
./win-builds/build-packages.sh 1.3-alpha1 windows
------------------------------------------------------------------------

=== Building only one package ===
You can further refine what will be built by appending the package name
after the series.

An example invocation is:
------------------------------------------------------------------------
./win-builds/build-packages.sh 1.3-alpha1 windows libjpeg
------------------------------------------------------------------------
