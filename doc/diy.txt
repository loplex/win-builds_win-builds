= Build yourself =

== Retrieve sources ==
Run the following to get all the source files:

------------------------------------------------------------------------
NOTK="http://git.notk.org/adrien/yypkg"

git clone "http://git.ocamlcore.org/yypkg/yypkg.git"
git clone "${NOTK}/win-builds.git"
git clone "${NOTK}/slackware64-current.git"
git clone "${NOTK}/mingw.git"
git clone "${NOTK}/slackbuilds.org.git"
------------------------------------------------------------------------

Note that this will fail with git 1.7.2 because of a bug that has been
fixed in git 1.8.0 (commit "http: fix segfault in handle_curl_result",
188923f0d1c8148415b3173986cd1e21871c947e).

The initial clone takes noticeably longer because it also downloads the
source tarballs for the softwares that will packaged.

This is done as a convenience to avoid downloading each and every
tarball but they are not exposed in the source directories
automatically. To do so, you need to run the following git command in
the 'mingw', 'slackware64-current' and 'slackbuilds.org' directories:

------------------------------------------------------------------------
git branch tarballs origin/tarballs
git merge origin/tarballs
------------------------------------------------------------------------

In the future, in order to update your git repository, you will then have to
run:

------------------------------------------------------------------------
git pull --rebase
git merge origin/tarballs
------------------------------------------------------------------------

== Build yypkg ==
=== Install OCaml and findlib/ocamlfind ===
Yypkg is written in OCaml and you will need the OCaml compiler. Most Linux
distributions have packaged it which makes the installation simple. You need
at least version 3.12.1 of OCaml.

Findlib (a.k.a. ocamlfind) is also needed; it is a tool like pkg-config but
for OCaml libraries. It is also packaged by most Linux distributions.

==== Arch Linux ====

------------------------------------------------------------------------
pacman -S ocaml ocaml-findlib
------------------------------------------------------------------------

==== Debian ====

------------------------------------------------------------------------
apt-get install ocaml ocaml-findlib
------------------------------------------------------------------------

==== Exherbo ====

------------------------------------------------------------------------
cave resolve -x dev-ocaml/findlib dev-lang/ocaml
------------------------------------------------------------------------

=== Patch, build and install (locally) cryptokit, ocaml-fileutils, ocaml-archive, libocaml_http ===

Yypkg requires patches to some libraries which have not yet been fully
upstreamed or versions more recent than the ones usually available through
distribution packages. Hopefully, ocamlfind/findlib handles very well local
library installation, i.e. it is possible and easy to install everything in a
path like `win-builds/yypkg/deps`.

==== First steps ====

Everything will be installed in `/path/to/yypkg/deps`. This can be changed to
anything.

It is then usually sufficient to run something similar to:

------------------------------------------------------------------------
export OCAMLFIND_DESTDIR=/path/to/yypkg/deps
export OCAMLPATH=${OCAMLFIND_DESTDIR}
------------------------------------------------------------------------

==== Set environment variables ====

------------------------------------------------------------------------
export OCAMLFIND_DESTDIR=/path/to/yypkg/deps
export OCAMLPATH=${OCAMLFIND_DESTDIR}
------------------------------------------------------------------------

==== cryptokit ====

NOTE: if you can install cryptokit 1.9 or above from your package manager, do
it instead of following the instructions below.

First, download and extract cryptokit 1.9.

------------------------------------------------------------------------
wget https://forge.ocamlcore.org/frs/download.php/1229/cryptokit-1.9.tar.gz
tar xf cryptokit-1.9.tar.gz
cd cryptokit-1.9
------------------------------------------------------------------------

Then configure, build and install (this is exactly like the "Common steps"
mentionned given above):

------------------------------------------------------------------------
./configure --prefix /path/to/yypkg/deps
make
mkdir -p /path/to/yypkg/deps/stublibs
make install
------------------------------------------------------------------------

Go back to the parent directory:
------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

==== ocaml-fileutils 0.4.5 with symlink patches ====

Download ocaml-fileutils 0.4.5, extract it and enter the
'ocaml-fileutils-0.4.5' directory:

------------------------------------------------------------------------
wget https://forge.ocamlcore.org/frs/download.php/1194/ocaml-fileutils-0.4.5.tar.gz
tar xf ocaml-fileutils-0.4.5.tar.gz
cd ocaml-fileutils-0.4.5
------------------------------------------------------------------------

Patch ocaml-fileutils (this patch fixes symlink handling in the library):

------------------------------------------------------------------------
patch -p1 < /path/to/yypkg/fileutils-symlink-patches/0001-FileUtil-replace-stat.is_link-boolean-with-a-Link-va.patch
patch -p1 < /path/to/yypkg/fileutils-symlink-patches/0002-FileUtil-symlinks-patch-2.patch
------------------------------------------------------------------------

Build and install:
------------------------------------------------------------------------
./configure --prefix /path/to/yypkg/deps
make
mkdir -p /path/to/yypkg/deps/stublibs
make install
------------------------------------------------------------------------

Go back to the parent directory:
------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

==== ocaml-archive 2.8.4+2 with API additions ====

Download ocaml-archive 2.8.4+2, extract it and enter the
'ocaml-archive-2.8.4+2' directory:

------------------------------------------------------------------------
wget https://forge.ocamlcore.org/frs/download.php/1129/ocaml-archive-2.8.4+2.tar.gz
tar xf ocaml-archive-2.8.4+2.tar.gz
cd ocaml-archive-2.8.4+2
------------------------------------------------------------------------

Patch ocaml-archive to disable the tests (which require more dependencies) and
to add more APIs in the bindings.

------------------------------------------------------------------------
patch -p1 < /path/to/yypkg/archive-patches/0001-_oasis-make-it-possible-to-not-build-tests-docs-and-.patch
patch -p1 < /path/to/yypkg/archive-patches/0002-Bind-extract-set_pathname-and-read_open_memory-strin.patch
patch -p1 < /path/to/yypkg/archive-patches/0003-stubs-bind-archive_entry_-set_-pathname-through-a-ma.patch
patch -p1 < /path/to/yypkg/archive-patches/0004-Bind-archive_entry_-set_-hard-sym-link-and-archive_e.patch
------------------------------------------------------------------------

Build and install:
------------------------------------------------------------------------
./configure --prefix /path/to/yypkg/deps --disable-archivelwt --disable-tests --disable-docs
make
mkdir -p /path/to/yypkg/deps/stublibs
make install
------------------------------------------------------------------------

Go back to the parent directory:
------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

==== Build libocaml_http ====

First, clone the git repository and init its submodules:

------------------------------------------------------------------------
git clone 'git://git.autogeree.net/~julm/libocaml.git'
cd libocaml
git submodule update --init
------------------------------------------------------------------------

You can now build and install the library:

------------------------------------------------------------------------
for i in exception option lexing ipv4_address ipv6_address plus uri http; do
  (cd libocaml_$i && make && make install)
done
------------------------------------------------------------------------

Go back to the parent directory:
------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

=== Build yypkg itself ===

Finally, 'cd' into the 'yypkg' source repository and simply run:

------------------------------------------------------------------------
make
------------------------------------------------------------------------

If you have another installation of ocaml-fileutils (through your usual
package manager for instance), you will get a number of warnings about having
duplicate packages. This is expected and ocamlfind will pick the first one,
which is in '$OCAMLPATH'.

Since there is no single use of yypkg, installation has to be done by hand;
the only requirement is that binaries go into a directory which is in '$PATH',
'/usr/local/bin' for instance:

------------------------------------------------------------------------
cp -L src/yypkg.native /usr/local/bin/yypkg
------------------------------------------------------------------------


------------------------------------------------------------------------
------------------------------------------------------------------------


------------------------------------------------------------------------
------------------------------------------------------------------------

== Start the build ==

=== Build everything ===
As root, run:

------------------------------------------------------------------------
make -C win-builds build_packages
./win-builds/build_packages @@VERSION@@
------------------------------------------------------------------------

=== Build only a series ===
It is possible to only build a subset of the available series:
native, cross_toolchain, windows.

* native adds new native tools on the build system that slackware doesn't
  have; for instance, it installs ocaml because building the ocaml
  cross-compiler requires an ocaml native compiler of the exact same
  version
* cross_toolchain builds the cross-toolchain
* windows cross-compiles the binaries that will run on windows (this
  include the GCC native compiler)

The series are given in the second argument to the `build-packages.sh`
script as a dash-separated list.

An example invocation which goes over `cross_tooolchain` and `windows` is:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@ cross_toolchain-windows
------------------------------------------------------------------------

Another one which only goes over the packages in `windows` is:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@ windows
------------------------------------------------------------------------

=== Build only one package ===
You can further refine what will be built by appending the package names
after the series. Each package name is given as a separate argument to the
script.

An example invocation is:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@ windows libjpeg
------------------------------------------------------------------------

For multiple packages, the invocation becomes:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@ windows libjpeg libpng lua
------------------------------------------------------------------------

== Build the host system (only if you really want to redo everything) ==
This requires running a slackware64 14.1 system currently. You also need a
mirror of the sources:.

------------------------------------------------------------------------
MIRROR="${PWD}/mirror/slackware64-current" \
  ./yy_of_slack/yy_of_slack.sh
------------------------------------------------------------------------
