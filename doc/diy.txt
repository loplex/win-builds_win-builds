= Build yourself =

== Scripts ==
Run the following to get all the source files:

------------------------------------------------------------------------
NOTK="http://git.notk.org/adrien/yypkg"

git clone "http://git.ocamlcore.org/yypkg/yypkg.git"
git clone "${NOTK}/win-builds.git"
git clone "${NOTK}/yy_of_slack.git"
git clone "${NOTK}/slackware64-current.git"
git clone "${NOTK}/mingw.git"
git clone "${NOTK}/slackbuilds.org.git"
------------------------------------------------------------------------

Note that this will fail with git 1.7.2 because of a bug that has been
fixed in git 1.8.0 (commit "http: fix segfault in handle_curl_result",
188923f0d1c8148415b3173986cd1e21871c947e).

== Build yypkg ==
=== Install OCaml and findlib/ocamlfind ===
Yypkg is written in OCaml and you will need the OCaml compiler. Most Linux
distributions have packaged it which makes the installation simple. You need
at least version 4.0 of OCaml.

Findlib (a.k.a. ocamlfind) is also needed; it is a tool like pkg-config but
for OCaml libraries. It is also packaged by most Linux distributions.

==== Arch Linux ====

------------------------------------------------------------------------
pacman -S ocaml ocaml-findlib
------------------------------------------------------------------------

==== Debian ====

------------------------------------------------------------------------
apt-get install ocaml ocaml-findlib
------------------------------------------------------------------------

==== Exherbo ====

------------------------------------------------------------------------
cave resolve -x dev-ocaml/findlib dev-lang/ocaml
------------------------------------------------------------------------

=== Patch, build and install (locally) ocaml-fileutils ===

Next, download ocaml-fileutils 0.4.5:

------------------------------------------------------------------------
wget https://forge.ocamlcore.org/frs/download.php/1194/ocaml-fileutils-0.4.5.tar.gz
------------------------------------------------------------------------

Extract it and enter the 'ocaml-fileutils-0.4.5' directory:

------------------------------------------------------------------------
tar xf ocaml-fileutils-0.4.5.tar.gz
cd ocaml-fileutils-0.4.5
------------------------------------------------------------------------

Patch ocaml-fileutils (this patch mostly fixes symlink handling in the
library):

------------------------------------------------------------------------
patch -p1 < /path/to/yypkg.git/fileutils-symlink-patches/0001-FileUtil-replace-stat.is_link-boolean-with-a-Link-va.patch
patch -p1 < /path/to/yypkg.git/fileutils-symlink-patches/0002-FileUtil-symlinks-patch-2.patch
------------------------------------------------------------------------

Chose a directory where this local version ocaml-fileutils will be installed;
it can be anything. Then configure, build and install ocaml-fileutils:

------------------------------------------------------------------------
./configure --prefix /tmp/ocaml-fileutils-install
make
mkdir -p /tmp/ocaml-fileutils-install
OCAMLFIND_DESTDIR=/tmp/ocaml-fileutils-install make install
------------------------------------------------------------------------

=== Build yypkg itself ===

Finally, 'cd' into the 'yypkg' source repository and simply run:

------------------------------------------------------------------------
OCAMLPATH=/tmp/ocaml-fileutils-install make
------------------------------------------------------------------------

If you have another installation of ocaml-fileutils (through our usual package
manager for instance), you will get a number of warnings about having
duplicate packages. This is expected and ocamlfind will pick the first one,
which is in '$OCAMLPATH'.

Since there is no single use of yypkg, installation has to be done by hand;
the only requirement is that binaries go into a directory which is in '$PATH',
'/usr/local/bin' for instance:

------------------------------------------------------------------------
for f in yypkg makeypkg sherpa sherpa_gen; do
  cp -L src/${f}.native /usr/local/bin/${f}
done
------------------------------------------------------------------------

== Download source tarballs ==
In order to retrieve the tarballs, you need to use the following git
command:

------------------------------------------------------------------------
git merge origin/tarballs
------------------------------------------------------------------------

In order to update your git repository, you will then have to run:

------------------------------------------------------------------------
git pull --rebase
git merge origin/tarballs
------------------------------------------------------------------------

If you've started doing changes, you should first learn how to use git
well.

== Start the build ==

=== Build everything ===
As root, run:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@
------------------------------------------------------------------------

=== Build only a series ===
It is possible to only build a subset of the available series:
native, cross_toolchain, windows.

* native adds new native tools on the build system that slackware doesn't
  have; for instance, it installs ocaml because building the ocaml
  cross-compiler requires an ocaml native compiler
* cross_toolchain builds the cross-toolchain
* windows cross-compiles the binaries that will run on windows (this
  include the GCC native compiler)

The series are given in the second argument to the `build-packages.sh` script
as a dash-separated list.

An example invocation which goes over `cross_tooolchain` and `windows` is:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@ cross_toolchain-windows
------------------------------------------------------------------------

Another one which only goes over the packages in `windows` is:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@ windows
------------------------------------------------------------------------

=== Build only one package ===
You can further refine what will be built by appending the package names
after the series. Each package name is given as a separate argument to the
script.

An example invocation is:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@ windows libjpeg
------------------------------------------------------------------------

For multiple packages, the invocation becomes:

------------------------------------------------------------------------
./win-builds/build-packages.sh @@VERSION@@ windows libjpeg libpng lua
------------------------------------------------------------------------

== Build the host system (only if you really want to redo everything) ==
This requires running a slackware64 14.1 system currently. You also need a
mirror of the sources:.

------------------------------------------------------------------------
MIRROR="${PWD}/mirror/slackware64-current" \
  ./yy_of_slack/yy_of_slack.sh
------------------------------------------------------------------------
