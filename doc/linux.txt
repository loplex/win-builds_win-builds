= Linux installation =

No Linux binaries are provided because of the differences between
distributions. The usual approach is to build the cross-compiler on the
host system and then re-use the prebuild windows packages (since they
are neutral to Linux systems anyway).

There are roughly three steps:

* build yypkg
* build the cross-compiler
* acquire or build the windows binaries

The packages are split into three series: native, cross_toolchain,
windows:

* native adds new native tools on the build system that Slackware doesn't
  have or has at a version that doesn't match; for instance, it installs OCaml
  because building the Ocaml cross-compiler requires an Ocaml native compiler of
  the exact same version
* cross_toolchain builds the cross-toolchain
* windows cross-compiles the binaries that will run on windows (this
  includes the GCC native compiler)

Building takes a fairly large amount of space, roughly 500MB for
'native_toolchain', 2GB for 'cross_toolchain_*' and 4.5GB for 'windows_*'.
Around 90% of this space is made up of temporary files in 'tmp' directories.

== Dependencies ==

=== Arch Linux ===

------------------------------------------------------------------------
pacman -S ocaml ocaml-findlib
------------------------------------------------------------------------

=== Debian ===

------------------------------------------------------------------------
apt-get install ocaml-base-nox ocaml-findlib libarchive-dev bsdtar libssl-dev
libjpeg-dev libpng-dev libfreetype6-dev libgif-dev libgl1-mesa-dev libtiff-dev
libsndfil-dev libudev-dev libmount-dev libblkid-dev xutils-dev intltool
gtk-doc-tools tclsh libgdk-pixbuf2.0-dev yasm autotools autopoint automake
build-essential flex bison libdbus-1-dev libgmp-dev libmpfr-dev libmpc-dev
apt-get install build-dep libelementary-dev
------------------------------------------------------------------------

=== Exherbo ===

------------------------------------------------------------------------
cave resolve -x dev-ocaml/findlib dev-lang/ocaml '>=app-arch/libarchive-3.1.2-r2'
------------------------------------------------------------------------

== Yypkg ==

=== Retrieve sources ===

------------------------------------------------------------------------
git clone "http://git.ocamlcore.org/yypkg/yypkg.git"
------------------------------------------------------------------------

=== Patch, build and install (locally) cryptokit, ocaml-fileutils, ocaml-archive, libocaml_http ===

Yypkg requires patches to some libraries which have not yet been fully
upstreamed or versions more recent than the ones usually available through
distribution packages. Hopefully, ocamlfind/findlib handles very well local
library installation, i.e. it is possible and easy to install everything in a
path like `win-builds/yypkg/deps`.

==== First steps ====

Everything will be installed in `/path/to/yypkg/deps`. This can be changed to
any directory.

==== Set environment variables ====

------------------------------------------------------------------------
YYPKG_SOURCE="$(pwd)/yypkg)"
export OCAMLFIND_DESTDIR=${YYPKG_SOURCE}/deps"
export OCAMLPATH="${OCAMLFIND_DESTDIR}"
mkdir -p "${OCAMLFIND_DESTDIR}/stublibs"
------------------------------------------------------------------------

==== cryptokit ====

NOTE: if you can install cryptokit 1.9 or above from your package manager, do
it instead of following the instructions below. This is the case for at least
Debian Jessie.

First, download and extract cryptokit 1.9.

------------------------------------------------------------------------
wget https://forge.ocamlcore.org/frs/download.php/1229/cryptokit-1.9.tar.gz
tar xf cryptokit-1.9.tar.gz
cd cryptokit-1.9

------------------------------------------------------------------------

Then configure, build and install:

------------------------------------------------------------------------
./configure --prefix "${OCAMLFIND_DESTDIR}"
make
make install

------------------------------------------------------------------------

Go back to the parent directory:
------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

==== ocaml-fileutils 0.4.5 with symlink patches ====

Download ocaml-fileutils 0.4.5, extract it and enter the
'ocaml-fileutils-0.4.5' directory:

------------------------------------------------------------------------
wget https://forge.ocamlcore.org/frs/download.php/1194/ocaml-fileutils-0.4.5.tar.gz
tar xf ocaml-fileutils-0.4.5.tar.gz
cd ocaml-fileutils-0.4.5

------------------------------------------------------------------------

Patch ocaml-fileutils (this patch fixes symlink handling in the library):

------------------------------------------------------------------------
patch -p1 < ${YYPKG_SOURCE}/fileutils-symlink-patches/0001-FileUtil-replace-stat.is_link-boolean-with-a-Link-va.patch
patch -p1 < ${YYPKG_SOURCE}/fileutils-symlink-patches/0002-FileUtil-symlinks-patch-2.patch

------------------------------------------------------------------------

Build and install:
------------------------------------------------------------------------
./configure --prefix ${OCAMLFIND_DESTDIR}
make
make install

------------------------------------------------------------------------

Go back to the parent directory:
------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

==== ocaml-archive 2.8.4+2 with API additions ====

Download ocaml-archive 2.8.4+2, extract it and enter the
'ocaml-archive-2.8.4+2' directory:

------------------------------------------------------------------------
wget https://forge.ocamlcore.org/frs/download.php/1129/ocaml-archive-2.8.4+2.tar.gz
tar xf ocaml-archive-2.8.4+2.tar.gz
cd ocaml-archive-2.8.4+2

------------------------------------------------------------------------

Patch ocaml-archive to disable the tests (which require more dependencies) and
to add more APIs in the bindings.

------------------------------------------------------------------------
patch -p1 < ${YYPKG_SOURCE}/archive-patches/0001-_oasis-make-it-possible-to-not-build-tests-docs-and-.patch
patch -p1 < ${YYPKG_SOURCE}/archive-patches/0002-Bind-extract-set_pathname-and-read_open_memory-strin.patch
patch -p1 < ${YYPKG_SOURCE}/archive-patches/0003-stubs-bind-archive_entry_-set_-pathname-through-a-ma.patch
patch -p1 < ${YYPKG_SOURCE}/archive-patches/0004-Bind-archive_entry_-set_-hard-sym-link-and-archive_e.patch

------------------------------------------------------------------------

Build and install:
------------------------------------------------------------------------
./configure --prefix ${OCAMLFIND_DESTDIR} --disable-archivelwt --disable-tests --disable-docs
make
make install

------------------------------------------------------------------------

Go back to the parent directory:
------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

==== Build libocaml_http ====

First, clone the git repository and init its submodules:

------------------------------------------------------------------------
git clone 'git://git.autogeree.net/~julm/libocaml.git'
cd libocaml
git submodule update --init

------------------------------------------------------------------------

You can now build and install the library:

------------------------------------------------------------------------
for i in exception option lexing ipv4_address ipv6_address plus uri http; do
  (cd libocaml_$i && make && make install) || break
done

------------------------------------------------------------------------

Go back to the parent directory:
------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

=== Build yypkg itself ===

Finally, 'cd' into the 'yypkg' source repository and simply run make:

------------------------------------------------------------------------
cd yypkg
make
------------------------------------------------------------------------

If you have another installation of ocaml-fileutils (through your usual
package manager for instance), you will get a number of warnings about having
duplicate packages. This is expected and ocamlfind will pick the first one,
which is in '$OCAMLPATH'.

Installation has to be done by hand; the only requirement is that binaries go
into a directory which is in '$PATH', '/usr/local/bin' for instance:

------------------------------------------------------------------------
cp -L src/yypkg.native /usr/local/bin/yypkg
------------------------------------------------------------------------

Go back to parent directory:

------------------------------------------------------------------------
cd ..
------------------------------------------------------------------------

== Build the cross-compiler ==

=== Retrieve sources ===
Run the following to get all the source files:

------------------------------------------------------------------------
NOTK="http://git.notk.org/adrien/yypkg"

git clone "${NOTK}/win-builds.git"
git clone "${NOTK}/slackware64-current.git"
git clone "${NOTK}/mingw.git"
git clone "${NOTK}/slackbuilds.org.git"

------------------------------------------------------------------------

NOTE: this fails with git 1.7.2 and is fixed in git 1.8.0 (commit "http: fix
segfault in handle_curl_result").

The initial clone takes noticeably longer because it also downloads the
source tarballs for the softwares that will packaged.

This is done as a convenience to avoid downloading each and every
tarball but they are not exposed in the source directories
automatically. To do so, you need to run the following:

------------------------------------------------------------------------
for d in mingw slackware64-current slackbuilds.org; do
  (cd $d && git checkout origin/tarballs . ) # The dot is significant.
done

------------------------------------------------------------------------

=== Build the build driver ===

Go back to the parent directory and build the infrastructure:
------------------------------------------------------------------------
make -C win-builds build
------------------------------------------------------------------------

It is possible to build only one or more series by passing their name as
argument to the "build" tool (separated by dashes if there are several.
As an example, to build only the cross_toolchain and windows series,
one would run:

-------------------------------------------------------------------------
./win-builds/build @@VERSION@@ native_toolchain-cross_toolchain
------------------------------------------------------------------------

It is also possible to build only one or more packages by passing their
name as argument to the "build" tool, after at least one series name.
The names are space-separated. An example would be:

------------------------------------------------------------------------
./win-builds/build @@VERSION@@ windows libjpeg libpng lua
------------------------------------------------------------------------

=== Build the cross-compiler ===

The packages must be built as root (or at least under the 'fakeroot' tool). To
build the cross-compiler, as root, run:

------------------------------------------------------------------------
./win-builds/build @@VERSION@@ native_toolchain-cross_toolchain
------------------------------------------------------------------------

To run the build under fakeroot first create and chown the installation
directories:

------------------------------------------------------------------------
for d in native_toolchain cross_toolchain_{32,64} windows_{32,64}; do
  mkdir /opt/${d}
  chown --reference=${HOME} /opt/${d}
done
------------------------------------------------------------------------

== Get the Windows binaries ==

There are two approaches possible:
* download packages from http://win-builds.org
* build packages yourself

=== Download packages ===

The following will install for both i686 and x86_64 in /opt/windows_*:

------------------------------------------------------------------------
deploy() {
  ARCH="${1}"
  BITS="${2}"

  export YYPREFIX=/opt/windows_${BITS}

  yypkg --init
  yypkg --config --predicates --set host="${ARCH}"
  yypkg --config --set-mirror "http://win-builds.org/@@VERSION@@/packages/windows_${BITS}"
  yypkg --web
}

(deploy 32 i686)
(deploy 64 x86_64)
------------------------------------------------------------------------

=== Build packages yourself ===

Like for the cross-compiler, run:

------------------------------------------------------------------------
./win-builds/build @@VERSION@@ windows
------------------------------------------------------------------------

== Extras ==

=== Modify the package lists ===

The list of packages to build is stored inside 'win-builds/package_list'
in a simple text format.

There is one package per line, comments are whole lines which start with
a '#'. Empty lines are allowed.

Each package line is made of a path, a space, a package name and,
optionally, a column and a "variant". For instance, the GCC package has
two possible variants: "core" and "full".

The contents of the 'cross_toolchain_32' file is shown below as an
example:

------------------------------------------------------------------------
slackware64-current/d binutils
mingw mingw-w64:headers
slackware64-current/d gcc:core
mingw mingw-w64:full
slackware64-current/d gcc:full
# mingw widl
# mingw flexdll
# slackbuilds.org ocaml
# slackbuilds.org ocaml-findlib
------------------------------------------------------------------------
