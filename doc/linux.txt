= Linux installation =

No Linux binaries are provided because of the differences between
distributions. The usual approach is to build the cross-compiler on the
host system and then re-use the prebuild windows packages (since they
are neutral to Linux systems anyway).

There are roughly three steps:

* build yypkg
* build the cross-compiler
* acquire or build the windows binaries

The packages are split into three series: native, cross_toolchain,
windows:

* native adds new native tools on the build system that Slackware doesn't
  have or has at a version that doesn't match; for instance, it installs OCaml
  because building the Ocaml cross-compiler requires an Ocaml native compiler of
  the exact same version
* cross_toolchain builds the cross-toolchain
* windows cross-compiles the binaries that will run on windows (this
  includes the GCC native compiler)

Building takes a fairly large amount of space, roughly 500MB for
'native_toolchain', 2GB for 'cross_toolchain_*' and 4.5GB for 'windows_*'
(which can be retrieved instead of being built).
Around 90% of this space is made up of temporary files in 'tmp' directories.

== Dependencies ==

The per-distributions package lists below are here to help you get all the
dependencies easily. The Debian/Ubuntu list is exhaustive and is the
reference. For other distributions, if you are able to complete the lists with
the right package name, please send it either on the
link:/support.html[users mailing list] or on the link:/bugs[bug tracker].

=== Arch Linux ===

------------------------------------------------------------------------
pacman -S ocaml ocaml-findlib
------------------------------------------------------------------------

=== Debian, Ubuntu and derivatives ===

------------------------------------------------------------------------
apt-get install ocaml-base-nox ocaml-findlib libarchive-dev bsdtar
libjpeg-dev libpng-dev libfreetype6-dev libgif-dev libtiff-dev
libudev-dev intltool
gtk-doc-tools tclsh libgdk-pixbuf2.0-dev yasm autotools autopoint automake
build-essential flex bison libdbus-1-dev libgmp-dev libmpfr-dev libmpc-dev
apt-get install build-dep libelementary-dev
------------------------------------------------------------------------

NOTE: You need to have at least ocamlfind/findlib 1.2.8; this can be an issue
on Ubuntu 12.04. It's a small and compatible install but if you cannot have
it, please create an entry on the link:/bugs[bug tracker] since it can be
solved by slightly changing the patches below.

=== Exherbo ===

------------------------------------------------------------------------
cave resolve -x dev-ocaml/findlib dev-lang/ocaml '>=app-arch/libarchive-3.1.2-r2'
------------------------------------------------------------------------

== Yypkg ==

Build of yypkg and its dependencies is automated and straightforward; simply
run:

------------------------------------------------------------------------
make -C yypkg
------------------------------------------------------------------------

Then, install as root (it copies a single executable to /usr/local/bin), run:
------------------------------------------------------------------------
make -C yypkg install
------------------------------------------------------------------------

== Build the cross-compiler ==

=== Retrieve sources ===
Run the following to get all the source files:

------------------------------------------------------------------------
for repo in win-builds slackware64-current mingw slackbuilds.org; do
  git clone "http://git.notk.org/adrien/yypkg/$repo.git"
done

------------------------------------------------------------------------

NOTE: this can fail with git 1.7.2 and is fixed in git 1.8.0 (commit "http: fix
segfault in handle_curl_result").

The initial clone takes noticeably longer because it also downloads the
source tarballs for the softwares that will be packaged.

When the build runs, if some source files are not already available, they will
be copied from the "origin/tarballs-@@VERSION@@" branch. If you wish to
provide your own version of a specific file, simply overwrite the one in the
source tree.

=== Build the build driver ===

Go back to the parent directory and build the infrastructure:
------------------------------------------------------------------------
make -C win-builds
# or
cd win-builds && make
------------------------------------------------------------------------

It is possible to build only one or more series by passing their name as
argument to the "build" tool (separated by dashes if there are several.
As an example, to build only the cross_toolchain and windows series,
one would run:

-------------------------------------------------------------------------
CROSS_TOOLCHAIN="all" WINDOWS="all" make
------------------------------------------------------------------------

It is also possible to build only one or more packages by passing their
name as argument to the "build" tool, after at least one series name.
The names are space-separated. An example would be:

------------------------------------------------------------------------
WINDOWS="libjpeg,libpng,lua" make
------------------------------------------------------------------------

Packages will only get rebuilt if at least one of their sources is more recent
than the output package.

=== Build the cross-compiler ===

Building the packages requires a root environment (privileges, umask, ...) or
at least fakeroot plus a tweak.

To build the cross-compiler as root, run:

------------------------------------------------------------------------
NATIVE_TOOLCHAIN="all" CROSS_TOOLCHAIN="all" make
------------------------------------------------------------------------

If you prefer to use fakeroot instead of running it as root, you first have to
create and chown the installation directories:

------------------------------------------------------------------------
for d in native_toolchain cross_toolchain_{32,64} windows_{32,64}; do
  mkdir /opt/${d}
  chown --reference=${HOME} /opt/${d}
done
------------------------------------------------------------------------

== Get the Windows binaries ==

There are two approaches possible:
* download packages from http://win-builds.org
* build packages yourself

=== Download packages ===

The following will install for both i686 and x86_64 in /opt/windows_*:

------------------------------------------------------------------------
deploy() {
  ARCH="${1}"
  BITS="${2}"

  export YYPREFIX=/opt/windows_${BITS}

  yypkg --init
  yypkg --config --predicates --set host="${ARCH}"
  yypkg --config --set-mirror "http://win-builds.org/@@VERSION@@/packages/windows_${BITS}"
  yypkg --web
}

(deploy 32 i686)
(deploy 64 x86_64)
------------------------------------------------------------------------

=== Build packages yourself ===

Like for the cross-compiler, run:

------------------------------------------------------------------------
WINDOWS="all" make
------------------------------------------------------------------------

== Extras ==

=== Modify the package lists ===

The list of packages to build is stored inside three files:
'win-builds/native_toolchain.ml', 'win-builds/cross_toolchain.ml',
'win-builds/windows.ml' as straightforward OCaml code.

A package description is made of a name, a variant (which is mostly useful for
bootstrapping a minimal version of a package before being able to build the
full one), a directory where its sources are stored, its dependencies,
version, build number and sources.

Below is the description for the freetype package from the windows series:

------------------------------------------------------------------------
  let freetype = add ("freetype", None)
    ~dir:"slackware64-current/l"
    ~dependencies:[ zlib; libpng ]
    ~version:"2.5.0.1"
    ~build:1
    ~sources:[
      "freetype-${VERSION}.tar.xz";
      "freetype.illadvisederror.diff.gz";
      "freetype.subpixel.rendering.diff.gz";
    ]
  in
------------------------------------------------------------------------

The package is named "freetype", doesn't provide a variant ("None" in the
code), is stored inside the "slackware64-current/l" directory, depends on zlib
and libpng, is at version 2.5.0.1 and first build, and has three listed
sources: its source tarball and two patches.
