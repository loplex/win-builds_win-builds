= Win-builds =

== Support and coverage ==
There are currently around 70 packages. There are both cross and native
toolchains. The cross toolchain requires a Linux system with a 64bit kernel
(not userspace).

.1 Windows files
This section provides 54 non-toolchain packages; they are sufficient to build
GTK+ and EFL applications, several network components and GCC itself.

* i686:
link:packages/windows_32/package_list.html[Detailed list]
link:logs/windows_32/[Build logs]
* x86_64:
link:packages/windows_64/package_list.html[Detailed list]
link:logs/windows_64/[Build logs]

.2 Cross-toolchain

GCC 4.8.2 (C, C++, ObjC), Mingw-w64 3.0.1

* i686:
link:packages/cross_toolchain_32/package_list.html[Package list]
link:logs/cross_toolchain_32/[Build logs]
* x86_64:
link:packages/cross_toolchain_64/package_list.html[Package list]
link:logs/cross_toolchain_64/[Build logs]

.3 Linux supplements

Additional tools for builds which cannot bootstrap themselves.

* x86_64:
link:packages/native_toolchain/package_list.html[Package list]
link:logs/native_toolchain/[Build logs]

== Getting and running the system ==

=== From Windows ===
These don't change system settings so you will have to set variables
like %PATH%.

==== Installer ====
There are two installers available, one for a native i686 toolchain and
another one for a native x86_64 toolchain (which will require Windows
x64 to run). They automate the steps mentioned in the next section; they
will download all the available packages in the mirror (around 60MB).

link:yypkg-1.2-rc1-i686.exe[Installer for i686-w64-mingw32]

link:yypkg-1.2-rc1-x86_64.exe[Installer for x86_64-w64-mingw32]

==== Manual steps ====
Download and extract link:yypkg-bin-1.2-rc1.tar.xz[the yypkg binaries].
Then, start a command prompt (cmd.exe), enter the directory where
you've extracted the files and run:

------------------------------------------------------------------------
set YYPREFIX=C:/win-builds-32
yypkg -init
yypkg -config -setpreds host="i686-w64-mingw32"
yypkg -config -setpreds target="i686-w64-mingw32"
sherpa -set-mirror http://win-builds.org/1.3-beta1/packages/windows_32
sherpa -install all
------------------------------------------------------------------------

=== From Linux 64b ===

The following commands will download and setup a system ready for
cross-compilation to i686-w64-mingw32. It goes through a chroot in order
to provide the matching versions of not only glibc but also GTK+, pango,
edje, Ocaml, ...

Get the project main scripts:

------------------------------------------------------------------------
git clone http://git.notk.org/adrien/yypkg/win-builds.git
------------------------------------------------------------------------

Download the base system and extract it somewhere:

------------------------------------------------------------------------
mkdir 1.3-beta1
wget -P 1.3-beta1 http://win-builds.org/1.3-beta1/system.tar.xz
------------------------------------------------------------------------

Chroot into the base environment with several environment variables set
automatically:

------------------------------------------------------------------------
sudo ./win-builds/main.sh 1.3-beta1
------------------------------------------------------------------------

The first time you get into the sytem, download and setup the
cross-toolchain and all the cross-compiled tools and libraries:

------------------------------------------------------------------------
/root/get-all-prebuilt-binaries.sh
------------------------------------------------------------------------

My typical workflow is to work outside of the chroot and only use it to
build; I use "mount bind" to make the build directory available
inside the chroot.

// === Yypkg cheatsheet ===
// See "yypkg -help" for a quick reference and
// link:http://git.ocamlcore.org/cgi-bin/gitweb.cgi?p=yypkg/yypkg.git;a=blob;f=USAGE[yypkg's
// documentation] for a more complete documentation

==== Demo ====
In order to build the GTK+ Hello world, cd in the mingw-build directory
and run (copy-paste) the following:

------------------------------------------------------------------------
sudo ./main.sh 1.3-beta1

cd root

cat << EOF > gtk_hello_world.c
#include <gtk/gtk.h>

int main(int argc, char *argv[]) {
    GtkWidget *window;
    gtk_init (&argc, &argv);
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    gtk_widget_show  (window);
    gtk_main ();
    return 0;
}
EOF

i686-w64-mingw32-gcc -o gtk_hello_world.exe gtk_hello_world.c $(pkg-config --cflags --libs gtk+-2.0)
------------------------------------------------------------------------

=== Advanced usage: Build it yourself ===
Building everything yourself is not difficult nor time-consuming: a full
build is very easy to setup and takes a couple hours on an old machine
and one hour on a quad-core from 2 to 3 years ago. The documentation is
available on a separate page link:diy.html[doc-diy].

=== Advanced usage: Package yourself ===
It is fairly easy to create new packages: the usual way is to port existing
Slackware build scripts to yypkg and mingw with a few simple serch-and-replace
operations.

You first need to have an environment setup for building packages; this step
is described on the link:diy.html[doc-diy] page. Once you have it, have a look
at the link:packaging.html[packager documentation] page.

== Current status (1.2 rc1) ==
=== Main changes ===
* stable i686-w64-mingw32 native compiler
* experimental x86_64-w64-mingw32 toolchain (both cross and native)
* OCaml cross-compiler
* yypkg and its deps built with only the binaries here
* SFX installer for windows
* more packages
* updated packages

=== Known issues ===
* GCC has to be invoked with its fullest name (like
  i686-w64-mingw32-gcc-4.7.2) because the other files are symlinks.
* Update a package is broken if there are symlinks in it.
* curl is built without SSL support (it's built before the corresponding
  libs).

=== Changes in 1.2 rc1 ===
* Link errors I had with the native toolchain was pebkac (--as-needed).
* less is fixed by creating /dev/tty.
* elvis doesn't work well in tmux; not specific to this project.
* Pango and GTK+ caches are created automatically by the SFX installers.
* libgcc_s_sjlj-1.dll is moved at packaging time in bin/.
* fc-cache seems unneeded and won't be run automatically.

== Roadmap and history ==
=== Roadmap ===
* 1.3: Q2 2013: Qt binaries, GStreamer
* 1.4, Q3 2013: VLC
* 2.0: Q4 2013: stable toolchain support for x86_64-w64-mingw32

=== History ===
* 1.2, April 2013: stable i686-w64-mingw32 native compiler, OCaml
  cross-compiler, experimental x86_64-w64-mingw32 support and installers
  for Windows.
* 1.1 RC1, released 09/10/2012: experimental i686-w64-mingw32 native
  compiler, around 50 packages (GTK+, EFL, curl, ...), uses yypkg 1.6
  and sherpa frontend.
* 1.0 RC1, released 06/08/2012: first public-ready release,
  i686-w64-mingw32 cross-compiler from linux 64, around 40 packages,
  uses yypkg 1.5.
