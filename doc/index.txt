= Win-builds =

== Support and coverage ==
There are currently around 65 packages. They are sufficient to build GTK+ and
EFL applications, several network components and GCC itself.

* i686:
link:packages/windows_32/package_list.html[Detailed list]
link:logs/windows_32/[Build logs]
* x86_64:
link:packages/windows_64/package_list.html[Detailed list]
link:logs/windows_64/[Build logs]

== Support ==

=== Security advisories and updates ===
Security advisories are sent through the corresponding mailing-list:
`security@`. To subscribe, send an empty mail titled 'subscribe' to
mailto:security-request@lists.win-builds.org?subject:subscribe[security-request@lists.win-builds.org].

Similarly, updates are notified through the `announce@` mailing-list.
To subscribe, send an empty mail titled 'subscribe' to
mailto:announce-request@lists.win-builds.org?subject:subscribe[announce-request@lists.win-builds.org].

=== Bug tracker and user@ mailing-list ===

The `users@` mailing-list is available for questions and help requests.
To subscribe, send an empty mail titled 'subscribe' to
mailto:users-request@lists.win-builds.org?subject:subscribe[users-request@lists.win-builds.org].

It is also possible to get support through the
link:https://lists.sourceforge.net/lists/listinfo/mingw-w64-public[Mingw-w64
mailing-list].

Bug reports are handled through the link:/bugs[Bug tracker].

=== IRC channels ===

The `#mingw-w64` IRC channels on Freenode and OFTC are appropriate places for
win-builds-related discussions.

== Getting and running the system ==
Note that these don't change system settings nor setup shell tools (for now).
This is a bare toolchain to use with other tools like MSYS, MSYS2, Cygwin or
an IDE.

Also make sure you read the <<Known_Issues>> section.

=== From Windows (outside of MSYS or Cygwin) ===
Simply download and run link:yypkg-@@VERSION@@.exe[].

The toolchain will then be setup and can be used standalone or from an IDE.
The only settings needed is to set the PATH and PKG_CONFIG_LIBDIR environment
variable to chose between the 32 bits and 64 bits toolchain:

* for 32 bits:
** prepend <install-dir-for-32b>\bin to PATH
** set PKG_CONFIG_LIBDIR to <install-dir-for-32b>\lib\pkgconfig

* for 64 bits:
** prepend <install-dir-for-64b>\bin to PATH
** set PKG_CONFIG_LIBDIR to <install-dir-for-64b>\lib64\pkgconfig

[NOTE]
The 64 bits toolchain requires a 64 bits host to run.

=== From Windows for MSYS or Cygwin ===
The how-to for use with MSYS or Cygwin is available on a link:msys-cygwin.html[dedicated page].

=== From Linux ===
The how-to for use with Linux is available on a link:linux.html[dedicated page].

// === Yypkg cheatsheet ===
// See "yypkg -help" for a quick reference and
// link:http://git.ocamlcore.org/cgi-bin/gitweb.cgi?p=yypkg/yypkg.git;a=blob;f=USAGE[yypkg's
// documentation] for a more complete documentation

==== Test ====
Build the GTK+ Hello world as a quick test. If you're using a posix shell, you
can run the following in a shell after having set the PATH and
PKG_CONFIG_LIBDIR environment variables (which 'win-builds-switch' does). For
other installation types you will need to do slight adaptations.

------------------------------------------------------------------------
cat << EOF > gtk_hello_world.c
#include <gtk/gtk.h>

int main(int argc, char *argv[]) {
    GtkWidget *window;
    gtk_init (&argc, &argv);
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    gtk_widget_show  (window);
    gtk_main ();
    return 0;
}
EOF

i686-w64-mingw32-gcc -o gtk_hello_world.exe gtk_hello_world.c $(pkg-config --cflags --libs gtk+-2.0)
------------------------------------------------------------------------

=== Update packages ===
Simply browse to the installation directory you wish to update, enter the
'bin' directory and run 'yypkg.exe'; it will automatically check for updates.

=== Advanced usage: Build it yourself ===
Building everything yourself is not difficult nor time-consuming: a full
build is very easy to setup and takes a couple hours on an old machine
and one hour on a quad-core from 2 to 3 years ago. The documentation is
available on a separate page link:diy.html[doc-diy].

=== Advanced usage: Package yourself ===
It is fairly easy to create new packages: the usual way is to port existing
Slackware build scripts to yypkg and mingw with a few simple search-and-replace
operations.

You first need to have an environment setup for building packages; this step
is described on the link:diy.html[doc-diy] page. Once you have it, have a look
at the link:packaging.html[packager documentation] page.

== Current status (1.4 beta1) ==
=== Main changes ===
* merged all executables together
* much easier installation on Windows
* no more chroot usage on Linux
* updated packages
* documentation improvements
* even faster and simpler build infrastructure

[[Known_Issues]]
=== Known issues and work-arounds ===
* Graphical installer is being reworked and is not available yet.
* Windows XP/2k3 don't handle junctions and even hardlinks very well, making
  their removal by hand difficult.

== History ==
* 1.3, January 2014: stable x86_64-w64-mingw32 native and cross compilers (GCC
  4.8.2, mingw-w64 3.1.0), updated packages, many documentation improvements,
  emulation of symlinks on Windows, installer scripts for MSYS/Cygwin and native
  Windows.
* 1.2, April 2013: stable i686-w64-mingw32 native compiler, OCaml
  cross-compiler, experimental x86_64-w64-mingw32 support and installers
  for Windows.
* 1.1 RC1, released 09/10/2012: experimental i686-w64-mingw32 native
  compiler, around 50 packages (GTK+, EFL, curl, ...), uses yypkg 1.6
  and sherpa frontend.
* 1.0 RC1, released 06/08/2012: first public-ready release,
  i686-w64-mingw32 cross-compiler from linux 64, around 40 packages,
  uses yypkg 1.5.
