= Win-builds =

== Support and coverage ==
There are currently around 70 packages. There are both cross and native
toolchains. The cross toolchain requires a Linux system with a 64bit kernel
(not userspace).

.1 Windows files
This section provides 54 non-toolchain packages; they are sufficient to build
GTK+ and EFL applications, several network components and GCC itself.

* i686:
link:packages/windows_32/package_list.html[Detailed list]
link:logs/windows_32/[Build logs]
* x86_64:
link:packages/windows_64/package_list.html[Detailed list]
link:logs/windows_64/[Build logs]

.2 Cross-toolchain

GCC 4.8.2 (C, C++, ObjC), Mingw-w64 3.0.1

* i686:
link:packages/cross_toolchain_32/package_list.html[Package list]
link:logs/cross_toolchain_32/[Build logs]
* x86_64:
link:packages/cross_toolchain_64/package_list.html[Package list]
link:logs/cross_toolchain_64/[Build logs]

.3 Linux supplements

Additional tools for builds which cannot bootstrap themselves.

* x86_64:
link:packages/native_toolchain/package_list.html[Package list]
link:logs/native_toolchain/[Build logs]

== Getting and running the system ==

=== From Windows ===
Note that these don't change system settings nor setup shell tools (for now).
This means you need to install msys, msys2, cygwin or nothing if your IDE
doesn't need anything besides the toolchain. You also need to set variables
like %PATH% yourself.

==== Automated install ====
As a stop-gap measure for the lack of an up-to-date installer, a .bat file has
been written.
Simply download the link:win-builds-bundle-@@VERSION@@.zip[the win-builds
binaries], extract them and run `win-install.bat'. It will install files in
`C:\win-builds-32' and `C:\win-builds-64'; if you want to change the path,
simply edit the .bat file in any text editor.

The toolchain will then be setup and can be used standalone or from an IDE.
The only settings needed is to set the PATH and PKG_CONFIG_LIBDIR environment
variable to chose between the 32 bits and 64 bits toolchain:

* for 32 bits:
** prepend C:\win-builds-32\bin to PATH
** set PKG_CONFIG_LIBDIR to C:\win-builds-32\lib\pkgconfig

* for 64 bits:
** prepend C:\win-builds-64\bin to PATH
** set PKG_CONFIG_LIBDIR to C:\win-builds-64\lib64\pkgconfig

[NOTE]
The 64 bits toolchain requires a 64 bits host to run.

==== Manual steps ====
The code below is a summary of what is done at installation on Windows. If you
want all the details, you should look at the source of
link:http://cgit.notk.org/adrien/yypkg/win-builds.git/tree/win-install.bat[win-install.bat].

Download and extract link:win-builds-bundle-@@VERSION@@.zip[the yypkg binaries].
Then, start a command prompt (cmd.exe), enter the directory where you've
extracted the files and run:

------------------------------------------------------------------------
set YYPREFIX=C:/win-builds-32
yypkg -init
yypkg -config -setpreds host="i686-w64-mingw32"
yypkg -config -setpreds target="i686-w64-mingw32"
sherpa -set-mirror http://win-builds.org/@@VERSION@@/packages/windows_32
sherpa -install all
------------------------------------------------------------------------


=== From Windows for MSYS ===
The how-to for use with MSYS is available on a link:msys.html[dedicated page].

=== From Linux 64b ===

The following commands will download and setup a system ready for
cross-compilation to i686-w64-mingw32. It goes through a chroot in order
to provide the matching versions of not only glibc but also GTK+, pango,
edje, Ocaml, ...

Get the project main scripts:

------------------------------------------------------------------------
git clone http://git.notk.org/adrien/yypkg/win-builds.git
------------------------------------------------------------------------

Download the base system and extract it somewhere:

------------------------------------------------------------------------
mkdir @@VERSION@@
wget -P @@VERSION@@ http://win-builds.org/@@VERSION@@/system.tar.xz
------------------------------------------------------------------------

Chroot into the base environment with several environment variables set
automatically:

------------------------------------------------------------------------
sudo ./win-builds/main.sh @@VERSION@@
------------------------------------------------------------------------

The first time you get into the sytem, download and setup the
cross-toolchain and all the cross-compiled tools and libraries:

------------------------------------------------------------------------
/root/get-all-prebuilt-binaries.sh
------------------------------------------------------------------------

My typical workflow is to work outside of the chroot and only use it to
build; I use "mount bind" to make the build directory available
inside the chroot.

// === Yypkg cheatsheet ===
// See "yypkg -help" for a quick reference and
// link:http://git.ocamlcore.org/cgi-bin/gitweb.cgi?p=yypkg/yypkg.git;a=blob;f=USAGE[yypkg's
// documentation] for a more complete documentation

==== Demo ====
In order to build the GTK+ Hello world, cd in the mingw-build directory
and run (copy-paste) the following:

------------------------------------------------------------------------
sudo ./main.sh @@VERSION@@

cd root

cat << EOF > gtk_hello_world.c
#include <gtk/gtk.h>

int main(int argc, char *argv[]) {
    GtkWidget *window;
    gtk_init (&argc, &argv);
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    gtk_widget_show  (window);
    gtk_main ();
    return 0;
}
EOF

i686-w64-mingw32-gcc -o gtk_hello_world.exe gtk_hello_world.c $(pkg-config --cflags --libs gtk+-2.0)
------------------------------------------------------------------------

=== Advanced usage: Build it yourself ===
Building everything yourself is not difficult nor time-consuming: a full
build is very easy to setup and takes a couple hours on an old machine
and one hour on a quad-core from 2 to 3 years ago. The documentation is
available on a separate page link:diy.html[doc-diy].

=== Advanced usage: Package yourself ===
It is fairly easy to create new packages: the usual way is to port existing
Slackware build scripts to yypkg and mingw with a few simple serch-and-replace
operations.

You first need to have an environment setup for building packages; this step
is described on the link:diy.html[doc-diy] page. Once you have it, have a look
at the link:packaging.html[packager documentation] page.

== Current status (1.3 beta3) ==
=== Main changes ===
* checked x86_64-w64-mingw32 toolchain
* emulation of symlinks on windows
* updated packages: GCC 4.8, Mingw-w64 v3 and all libraries
* faster build infrastructure

=== Known issues ===
* On Windows, packages with symlinks to directories cannot be updated; this
  will be fixed in a later yypkg release.
* Graphical installer is being reworked and is not available yet.

=== Roadmap to next version ===
* Installer update and creation of Pango, GTK+ and font caches.

== History ==
* 1.3, December 2013: stable x86_64-w64-mingw32 native and cross compilers,
  updated packages, many documentation improvements, emulation of symlinks on
  Windows.
* 1.2, April 2013: stable i686-w64-mingw32 native compiler, OCaml
  cross-compiler, experimental x86_64-w64-mingw32 support and installers
  for Windows.
* 1.1 RC1, released 09/10/2012: experimental i686-w64-mingw32 native
  compiler, around 50 packages (GTK+, EFL, curl, ...), uses yypkg 1.6
  and sherpa frontend.
* 1.0 RC1, released 06/08/2012: first public-ready release,
  i686-w64-mingw32 cross-compiler from linux 64, around 40 packages,
  uses yypkg 1.5.
