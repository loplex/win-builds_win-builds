= Yypkg's mingw-builds =

== Support and coverage ==
There are currently around 70 packages. There are both cross and native
toolchains. The native one is new and less tested than the cross one.
The cross toolchain requires a Linux system with a 64bit kernel (not
userspace).

The toolchain targetting x86_64-w64-mingw32 and the corresponding
packages are currently experimental.

=== Native Linux toolchain supplements ===
The OCaml cross-compiler also requires a native compiler; that's
typically what this section provides.

link:packages/native_toolchain/package_list.html[Package list]
link:logs/native_toolchain/[Build logs]

=== Cross-toolchain ===
The toolchain provides binutils 2.23.52, GCC 4.7.2 with C and C++
support along with mingw-w64 2.0.7.

* i686:
link:packages/cross_toolchain_32/package_list.html[Package list]
link:logs/cross_toolchain_32/[Build logs]
* x86_64:
link:packages/cross_toolchain_64/package_list.html[Package list]
link:logs/cross_toolchain_64/[Build logs]

=== Windows files ===
There are currently 54 non-toolchain packages with many more planned;
they are sufficient to build GTK+ and EFL applications, several network
components and GCC itself; webkit-gtk support is close.

* i686:
link:packages/windows_32/package_list.html[Detailed list]
link:logs/windows_32/[Build logs]
* x86_64:
link:packages/windows_64/package_list.html[Detailed list]
link:logs/windows_64/[Build logs]

There are two notable build failures for x64: GTK+2 and Elementary.

== Getting and running the system ==

=== Simple use with native compilation and pre-built binaries ===
These don't change system settings so you will have to set variables
like %PATH%.

==== Windows Installer ====
There are two installers available, one for a native i686 toolchain and
another one for a native x86_64 toolchain (which will require Windows
x64 to run). They automate the steps mentionned in the next section.
link:yypkg-1.2-rc1-i686.exe[Installer for i686-w64-mingw32]

link:yypkg-1.2-rc1-x86_64.exe[Installer for x86_64-w64-mingw32]

==== Manual steps ====
Download and extract link:yypkg-bin-1.2-rc1.tar.xz[the yypkg binaries].
Then, run:
------------------------------------------------------------------------
set YYPREFIX=C:/yypkg_32
yypkg -init
yypkg -config -setpreds host="i686-w64-mingw32"
yypkg -config -setpreds target="i686-w64-mingw32"
sherpa -set-mirror http://yypkg.org/mingw-builds/1.2-beta2/packages/windows_32
sherpa -install all
------------------------------------------------------------------------

=== Simple use with cross-compilation and prebuilt binaries ===

The following commands will download and setup a system ready for
cross-compilation to i686-w64-mingw32.

Download the base system and extract it somewhere:
------------------------------------------------------------------------
wget http://yypkg.org/mingw-builds/1.2-beta2/system.tar.xz
mkdir 1.2-beta2
sudo tar xf system.tar.xz -C 1.2-beta2
------------------------------------------------------------------------

Get the project main scripts:
------------------------------------------------------------------------
git clone http://git.notk.org/adrien/yypkg/mingw-builds.git
------------------------------------------------------------------------

Chroot into the base environment with several environment variables set
automatically:
------------------------------------------------------------------------
sudo ./mingw-builds/main.sh 1.2-beta2
------------------------------------------------------------------------

The first time you get into the sytem, download and setup the
cross-toolchain and all the cross-compiled tools and libraries:
------------------------------------------------------------------------
/root/get-all-prebuilt-binaries-i686.sh
------------------------------------------------------------------------

// === Yypkg cheatsheet ===
// See "yypkg -help" for a quick reference and
// link:http://git.ocamlcore.org/cgi-bin/gitweb.cgi?p=yypkg/yypkg.git;a=blob;f=USAGE[yypkg's
// documentation] for a more complete documentation

==== Demo ====
In order to build the GTK+ Hello world, cd in the mingw-build directory
and run (copy-paste) the following:

------------------------------------------------------------------------
sudo ./main.sh 1.2-beta2

cd root

cat << EOF > gtk_hello_world.c
#include <gtk/gtk.h>

int main(int argc, char *argv[]) {
    GtkWidget *window;
    gtk_init (&argc, &argv);
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    gtk_widget_show  (window);
    gtk_main ();
    return 0;
}
EOF

i686-w64-mingw32-gcc -o gtk_hello_world.exe gtk_hello_world.c $(pkg-config --cflags --libs gtk+-2.0)
------------------------------------------------------------------------

=== Advanced usage: Build it yourself ===
Building everything yourself is not difficult nor time-consuming: a full
build is very easy to setup and takes a couple hours on an old machine
and one hour on a quad-core from 2 to 3 years ago. The documentation is
available on a separate page link:diy.html[doc-diy].

=== Advanced usage: Package yourself ===
It is fairly easy to create new packages. The usual way is to port
Slackware build scripts to yypkg and mingw. Please refer to the
link:packaging.html[packager documentation].

== Current release status (1.2 beta2) ==
=== Main changes ===
* stable i686-w64-mingw32 native compiler
* experimental x86_64-w64-mingw32 toolchain (both cross and native)
* OCaml cross-compiler
* yypkg and its deps built with only the binaries here
* SFX installer for windows
* more packages
* updated packages

=== Known issues ===
* libgcc_s_sjlj-1.dll is not in bin/
* GCC has to be invoked with its fullest name (like
  i686-w64-mingw32-gcc-4.7.2) because the other files are symlinks.

=== Changes in 1.2 beta2 ===
* Link errors with the native toolchain was pebkac (--as-needed).
* less is fixed by creating /dev/tty.
* elvis doesn't work well in tmux; not specific to this project.
* Pango and GTK+ caches won't be created automatically in this release.
* fc-cache seems unneeded and won't be run automatically.

== Roadmap and history ==
=== Roadmap ===
* 1.2, Q1 2013: stable i686-w64-mingw32 native compiler, OCaml
  cross-compiler, experimental x86_64-w64-mingw32 support
* 1.3: Q3 2013: Qt binaries, VLC GUI
* 1.4, Q2 2013: codec libraries for VLC
* 2.0: Q4 2013: stable toolchain support for x86_64-w64-mingw32

=== History ===
* 1.1 RC1, released 09/10/2012: experimental i686-w64-mingw32 native
  compiler, around 50 packages (GTK+, EFL, curl, ...), uses yypkg 1.6
  and sherpa frontend.
* 1.0 RC1, released 06/08/2012: first public-ready release,
  i686-w64-mingw32 cross-compiler from linux 64, around 40 packages,
  uses yypkg 1.5.
