= Packaging =

== Import a package script from slackware or slackbuilds.org ==

=== Environment ===
Build the packages that already exist. This will ensure you have
everything needed in a working state; documentation for this is on
link:diy.html[doc-diy].

=== Import the build script ===
Currently you have to ask me to make the slackware or slackbuilds.org
file appear in the win-builds tree.

=== Port the build script (mostly search-replace) ===
* Replace all occurences of 'usr' with '$\{PREFIX\}' (verbatim, don't
  expand the variable)

* Replace the block of code that sets SLKCFLAGS and LIBDIRSUFFIX with:
+
------------------------------------------------------------------------
case "${HOST_TRIPLET}" in
  i686-w64-mingw32) LIBDIRSUFFIX="" ;;
  x86_64-w64-mingw32) LIBDIRSUFFIX="64" ;;
esac
------------------------------------------------------------------------

* Replace occurences of '$SLKCFLAGS' with '-O2'
* Add '--host=$\{HOST_TRIPLET\}' to the configure invocation.

* Replace 'grep ELF' with 'grep $\{HOST_EXE_FORMAT\}'
* Replace 'xargs strip' with 'xargs $\{HOST_STRIP\}'

* Add a .yypkg.meta file to the package directory; most usually you'll
  only have to 'cp' another one (like libogg's libogg.yypkg.meta); don't
  forget to give it a proper name.
* Replace the 'makepkg' call with a makeypkg one:
+
------------------------------------------------------------------------
cat ${CWD}/${PKGNAM}.yypkg.meta | sed \
  -e "s/%{PKG}/${PKGNAM}/" \
  -e "s/%{HST}/${HOST_TRIPLET}/" \
  -e "s/%{TGT}//" \
  -e "s/%{VER}/$(echo ${VERSION} | tr . ' ')/" \
  -e "s/%{BUILD}/${BUILD}/" \
  -e "s/%{DESCR}/${DESCR:-"No description"}/" \
  | makeypkg -o ${YYOUTPUT} -meta - "${PKG}/${PREFIX}"
------------------------------------------------------------------------
+
Some packages don't set the 'PKGNAM' variable but instead hardcode the
package name throughout the script; in that case, use the package name
instead '$\{PKGNAM\}'.

* If there are many source files, replace the 'find + chmod'
  commands which are used to reset file permissions to sane default with
  'chmod -R u+w,go+r-w,a-s .'.

=== List your package ===
Edit win-builds/build-packages.sh and add your package to the
appropriate list; you need to put your package after all the other
packages it depends on.

=== Test your package ===
You can now build your package like any other package. See the
link:diy.html#Start-the-build[documentation on building packages]
for a howto.

=== Add the tarballs to git ===
You need a local branch for the remote "binaries" branch:
------------------------------------------------------------------------
git branch binaries origin/binaries
------------------------------------------------------------------------

Now you need to commit the tarballs in this branch. In order to commit
to this branch without doing many operations, I've created a script that
commits to a different branch without checking it out.
Usage is:
------------------------------------------------------------------------
git ctb <branch> <files...>
------------------------------------------------------------------------
Example:
------------------------------------------------------------------------
git ctb binaries flexdll/flexdll-0.30.tar.gz mingw-w64/mingw-w64-v2.0.7.tar.gz
------------------------------------------------------------------------

Here, "ctb" is an alias in my ~/.gitconfig:

------------------------------------------------------------------------
[alias]
  ctb = !commit-to-branch.sh
------------------------------------------------------------------------

In turn, "commit-to-branch.sh" is a shell script which I store in my
$PATH and which content is:
------------------------------------------------------------------------
#!/bin/sh -eux

OPERATION="${1}"
BRANCH="${2}"
shift; shift
FILES="$@"

case "${OPERATION}" in
  "add") COMMIT_MESSAGE_PREFIX="Adding" ;;
  "rm")  COMMIT_MESSAGE_PREFIX="Removing" ;;
  *) echo "Action is neither 'add' nor 'rm'. Cannot proceed."; exit 1 ;;
esac

for file in ${FILES}; do
  (
    printf "commit refs/heads/${BRANCH}\n"
    printf "committer <${USER}@${HOSTNAME}> now\n"
    printf "data <<EOC\n"
    printf "${COMMIT_MESSAGE_PREFIX} $(basename ${file}).\n"
    printf "EOC\n"
    if git branch 2>/dev/null | grep -q "${BRANCH}"; then
      printf "from refs/heads/${BRANCH}^0\n"
    fi
    case "${OPERATION}" in
      "add")
        printf "M 100644 inline ${file}\n"
        printf "data $(stat --format='%s' ${file})\n"
        cat ${file}
      ;;
      "rm")
        printf "D ${file}\n"
      ;;
    esac
  ) \
  | git fast-import --quiet --date-format=now
done
------------------------------------------------------------------------

== Create a new package ==
TBD
