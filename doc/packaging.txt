= Packaging =

== Environment ==
Build the packages that already exist. This will ensure you have
everything needed in a working state; documentation for this is on
link:diy.html[doc-diy].

== Check whether a Linux build script already exists ==

There is a fairly large number of slackware build scripts, either
- In one of the subdirectory (a "series") of
  link:http://cgit.notk.org/adrien/slackware-git-track/slackware64-current.ext.git/tree/slackware64-current/source[slackware]
- On link:http://slackbuilds.org[slackbuilds.org] (community repository of
  build scripts)

If such a build script exist, read <<Existing>>. Otherwise, read <<New>>.

[[Existing]]
== Port an existing build script ==
=== Do the initial import ===
Copy the directory in the corresponding git repository: either
link:http://cgit.notk.org/adrien/yypkg/slackware64-current.git/[slackware64-current]
or
link:http://cgit.notk.org/adrien/yypkg/slackbuilds.org.git/[slackbuilds.org].

In our example, we'll reuse the speex package from slackbuilds.org.  A simple
way to copy it is to run the following from the parent directory of
win-builds:

------------------------------------------------------------------------
cd slackbuilds.org
lftp -c 'connect http://slackbuilds.org/slackbuilds/14.1/audio; mirror speex'
------------------------------------------------------------------------

=== Port the build script (mostly search-replace) ===
* Replace all occurrences of 'usr' with '$\{PREFIX\}' (verbatim, don't
  expand the variable)

* Locate the block of code that sets SLKCFLAGS and LIBDIRSUFFIX; it starts
like:
+
------------------------------------------------------------------------
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
------------------------------------------------------------------------
+
Replace it with:
+
------------------------------------------------------------------------
case "${HOST_TRIPLET}" in
  i686-w64-mingw32) LIBDIRSUFFIX="" ;;
  x86_64-w64-mingw32) LIBDIRSUFFIX="64" ;;
esac
------------------------------------------------------------------------

* Replace occurrences of '$SLKCFLAGS' with '-O2'
* Add '--host=$\{HOST_TRIPLET\}' to the configure invocation.

* Locate the 'strip' invocation; it looks like:
+
------------------------------------------------------------------------
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
------------------------------------------------------------------------
+
Replace 'grep ELF' with 'grep $\{HOST_EXE_FORMAT\}' and 'xargs strip' with
'xargs $\{HOST_STRIP\}'.

* Add a .yypkg.script file to the package directory; if you have nothing
  specific to set for the packaging (by far the usual case), you only have to
  'cp' another one; any except gcc's will do; don't forget to give it a proper
  name.
* Go near the end of the file and replace:
+
------------------------------------------------------------------------
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
------------------------------------------------------------------------
+
with
+
------------------------------------------------------------------------
cat ${CWD}/${PKGNAM}.yypkg.script | sed \
  -e "s/%{PKG}/${PKGNAM}/" \
  -e "s/%{HST}/${HOST_TRIPLET}/" \
  -e "s/%{TGT}//" \
  -e "s/%{VER}/${VERSION}/" \
  -e "s/%{BUILD}/${BUILD}/" \
  -e "s/%{DESCR}/${DESCR:-"No description"}/" \
  | makeypkg -o ${YYOUTPUT} -script - "${PKG}/${PREFIX}"
------------------------------------------------------------------------
+
Some packages don't set the 'PKGNAM' variable but instead hardcode the
package name throughout the script; in that case, use the package name
instead of '$\{PKGNAM\}'.

* If there are many source files, replace the 'find + chmod'
  commands which are used to reset file permissions to sane default with
  'chmod -R u+w,go+r-w,a-s .'.

=== Add your package to the list ===
Edit win-builds/build-packages.sh and add your package to the
appropriate list; you need to put your package after all the other
packages it depends on.

=== Test your package ===
You can now build your package like any other package. See the
link:diy.html#Start-the-build[documentation on building packages]
for a howto. Remember to put the source tarball in the directory of the build
scripts, i.e. next to the .SlackBuild file.

=== Add the tarballs to git ===
You need a local branch for the remote "binaries" branch:
------------------------------------------------------------------------
git branch binaries origin/binaries
------------------------------------------------------------------------

Now you need to commit the tarballs in this branch. In order to commit
to this branch without doing many operations, I've created a script that
commits to a different branch without checking it out.
Usage is:
------------------------------------------------------------------------
git ctb <branch> <files...>
------------------------------------------------------------------------
Example:
------------------------------------------------------------------------
git ctb binaries flexdll/flexdll-0.30.tar.gz mingw-w64/mingw-w64-v2.0.7.tar.gz
------------------------------------------------------------------------

Here, "ctb" is an alias in my ~/.gitconfig:

------------------------------------------------------------------------
[alias]
  ctb = !commit-to-branch.sh
------------------------------------------------------------------------

In turn, "commit-to-branch.sh" is a shell script which I store in my
$PATH and which content is:
------------------------------------------------------------------------
include::../commit-to-branch.sh[]
------------------------------------------------------------------------

[[New]]
== Create A New Package ==
TBD
