#!/bin/sh -ex

CWD="$(cd "$(dirname "${0}")" && pwd)"
if pkg-config --exists 'elementary >= 1.11'; then
  YYPKG_TARGET="yypkg"
else
  YYPKG_TARGET="yypkg-no-gui"
fi

libocaml="exception option lexing plus ipv4_address ipv6_address uri http"
fileutils="ocaml-fileutils-${FILEUTILS_VERSION}"
archive="ocaml-archive-${ARCHIVE_VERSION}"
cryptokit="cryptokit-${CRYPTOKIT_VERSION}"
efl="ocaml-efl-${EFL_VERSION}"
yypkg="yypkg-${YYPKG_VERSION}"

download_and_extract() {
  rm -rf "${1}" "${1}.${2}"
  if ! [ -e "tarballs/${1}.${2}" ]; then
    mkdir -p tarballs
    (cd tarballs && wget "${YYPKG_FILES}/${1}.${2}")
  fi
  tar xf "tarballs/${1}.${2}"
}

build_oasis() {
  local NAME="${1}"
  local CONFIGURE_ARGS="${2:-""}"
  local make="ocaml setup.ml"
	${make} -configure --prefix "${OCAMLFIND_DESTDIR}" ${CONFIGURE_ARGS} \
	&& ${make} -build -j 4 \
	&& (${make} -uninstall || true; ocamlfind remove "${NAME}" || true; ${make} -install)
}

P() {
  patch --verbose -p1 < "${CWD}/patches/${1}"
}

download_and_extract "${cryptokit}" "tar.gz"
download_and_extract "${fileutils}" "tar.gz"
download_and_extract "${archive}" "tar.gz"
if [ x"${YYPKG_TARGET}" = x"yypkg" ]; then
  download_and_extract "${efl}" "tar.gz"
fi
download_and_extract "${yypkg}" "tar.xz"

for tarball in ${libocaml}; do
  download_and_extract libocaml_${tarball}.${LIBOCAML_VERSION} tar.xz
done
cp post-ocamllex libocaml_lexing.${LIBOCAML_VERSION}/src

mkdir -p ${OCAMLFIND_DESTDIR}/stublibs

# cryptokit
(
  cd ${cryptokit}
  build_oasis cryptokit ""
)

# fileutils
(
  cd ${fileutils}
  P fileutils/0001-FileUtil-replace-stat.is_link-boolean-with-a-Link-va.patch
  P fileutils/0002-FileUtil-symlinks-patch-2.patch
  build_oasis fileutils ""
)

# archive
(
  cd ${archive}
  P archive/0001-_oasis-make-it-possible-to-not-build-tests-docs-and-.patch
  P archive/0002-Bind-extract-set_pathname-and-read_open_memory-strin.patch
  P archive/0003-stubs-bind-archive_entry_-set_-pathname-through-a-ma.patch
  P archive/0004-Bind-archive_entry_-set_-hard-sym-link-and-archive_e.patch
  build_oasis archive "--disable-archivelwt --disable-tests --disable-docs"
)

# libocaml
for lib in ${libocaml}; do
  (
    cd libocaml_${lib}.${LIBOCAML_VERSION}
    make
    make install
  )
done

# ocaml-efl
if [ x"${YYPKG_TARGET}" = x"yypkg" ]; then
(
  cd ${efl}
  build_oasis efl ""
)
fi

# yypkg
(
  cd ${yypkg}
  make "${YYPKG_TARGET}"
)

