#!/bin/sh

set -eux

slackbuild=$1
folder=$(dirname $slackbuild)
slackbuild=$(basename $slackbuild)
# We get the name of the slackbuild, strip trailing digits and starting "lib"
name=$(echo $slackbuild | rev | cut -d. -f2- | rev | sed -e 's/[[:digit:]]\+$//' -e 's/^lib//')

cd $folder

################################################################################
### User Settings ###
################################################################################

INSTALL_MIRROR="http://notk.org/~adrien/gits/slackware64-current.ext"
export lt_cv_deplibs_check_method='pass_all'

################################################################################
### Settings ###
################################################################################

INSTALL_PREFIX=/$YYPREFIX

if [ "$TRIPLET" = "i686-w64-mingw32" ]; then
  PREFIX=/$TRIPLET
  LIBDIRSUFFIX="32"
  EXE_FORMAT="PE"
  STRIP=${TRIPLET}-strip
elif [ "$TRIPLET" = "x86_64-w64-mingw32" ]; then
  PREFIX=/$TRIPLET
  LIBDIRSUFFIX="64"
  EXE_FORMAT="PE"
  STRIP=${TRIPLET}-strip
fi

export PKG_CONFIG_LIBDIR=${INSTALL_PREFIX}/${PREFIX}/lib${LIBDIRSUFFIX}/pkgconfig
export PKG_CONFIG_PATH=""
export PATH=${INSTALL_PREFIX}/${PREFIX}/bin:${PATH}
LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-""}
export LD_LIBRARY_PATH=${INSTALL_PREFIX}/${PREFIX}/lib:${INSTALL_PREFIX}/${PREFIX}/lib64:${INSTALL_PREFIX}/${PREFIX}/lib32:${LD_LIBRARY_PATH}
export EXE_FORMAT
export STRIP

################################################################################
### Download sources ###
################################################################################

# We need to find the filename for the sources

# It's stored in git and we may have several files to download (see libpng)
# We assert that all files in the current folder are required and that some more
# from subfolders may be required too but that these have ${name} in the path
srcfiles=" $(git ls-tree --name-only HEAD | grep '\.tar\.[gbx]z2\?$')" || true
srcfiles+=" $(git ls-tree -r --name-only HEAD | grep ${name} | grep '\.tar\.[gbx]z2\?$') " || true

# We also need resolve patch files, only difference is the regexp (no ".tar")
patches=" $(git ls-tree --name-only HEAD | grep '\.[gbx]z2\?$') " || true
patches+=" $(git ls-tree -r --name-only HEAD | grep ${name} | grep '\.[gbx]z2\?$') " || true
for file in ${srcfiles} ${patches}; do
  echo "Source file is ${file}"

  NAME_NOEXT="$(echo ${file} | rev | cut -d. -f3- | rev)"
  EXT1="$(echo ${file} | rev | cut -d. -f2 | rev)"
  EXT2="$(echo ${file} | rev | cut -d. -f1 | rev)"

  # Reset the file to be sure of its contents
  git checkout ${file}

  # If the file isn't ascii text, it means the file wasn't stored externally in git,
  #   also meaning ${file} is probably directly the file and we don't need to fetch it
  if [ "$(file -b ${file})" = "ASCII text" ]; then
    sha1=$(cat ${file})

    archive=${NAME_NOEXT}_${sha1}.${EXT1}.yypkg.${EXT2}

    # Check the local archive isn't corrupt
    if [ -e ${archive} ]; then
      if [ "${sha1}" != "$(sha1sum ${archive} | awk -F' ' '{ print $1; }')" ]; then
        rm ${archive}
      fi
    fi

    # If the local archive doesn't exist or was corrupted, download it
    if [ ! -e ${archive} ]; then
      wget ${INSTALL_MIRROR}/${sha1} --quiet -O ${archive}
    fi

    # We remove the file with the sha1 and replace it with our regular source
    # It's not a problem since it's still available in git's index
    rm ${file}
    # If archive="foo/bar/baz.blah", basename prevents the link from dangling
    ln -s "$(basename ${archive})" ${file}
  fi
done

################################################################################
### Sanity checks ###
################################################################################

# Check ${INSTALL_PREFIX} exists
if [ ! -d ${INSTALL_PREFIX} ]; then
  echo "${INSTALL_PREFIX} must exist and contain a valid toolchain in bin/."
  exit 1
fi

################################################################################
### Fire up the slackbuild ###
################################################################################

HST="${HST}" TGT=${TGT} PREFIX=${PREFIX} ./${slackbuild}

################################################################################
### Move source files back in place ###
################################################################################

git checkout ${srcfiles} ${patches}

